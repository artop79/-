// resume-analyzer.js - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—é–º–µ

document.addEventListener('DOMContentLoaded', () => {
    // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
    const resumeUploadArea = document.getElementById('resume-upload-area');
    const resumeFileInput = document.getElementById('resume-file');
    const vacancyUploadArea = document.getElementById('vacancy-upload-area');
    const vacancyFileInput = document.getElementById('vacancy-file');
    const analyzeButton = document.getElementById('analyze-button');
    const progressBar = document.getElementById('progress-bar');
    const progressBarInner = document.getElementById('progress-bar-inner');
    const progressBarText = document.getElementById('progress-bar-text');
    const resultPanel = document.getElementById('result-panel');
    const errorPanel = document.getElementById('error-panel');
    const retryButton = document.getElementById('retry-button');

    // –°–±—Ä–æ—Å drag&drop –∑–æ–Ω—ã
    function resetDropArea(area, fileInput, label, icon = 'üìÑ') {
        area.innerHTML = `
            <div class="upload-icon">${icon}</div>
            <h3 class="upload-text">${label}</h3>
            <p>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PDF, DOCX</p>
            <button class="button" id="upload-btn-${fileInput.id}">–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª</button>
            <input type="file" id="${fileInput.id}" class="file-input" accept=".pdf,.docx,.doc">
        `;
        // –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π fileInput –ø–æ—Å–ª–µ innerHTML
        const newInput = area.querySelector('input[type=file]');
        document.getElementById(`upload-btn-${fileInput.id}`).addEventListener('click', () => newInput.click());
        newInput.addEventListener('change', () => handleFileSelect(area, newInput, label, icon));
    }

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
    function handleFileSelect(area, fileInput, label, icon = 'üìÑ') {
        if (fileInput.files.length) {
            const fileName = fileInput.files[0].name;
            area.innerHTML = `
                <div class="upload-icon">${icon}</div>
                <h3 class="upload-text">–§–∞–π–ª –≤—ã–±—Ä–∞–Ω</h3>
                <p>${fileName}</p>
                <button class="button button-outline" id="change-file-${fileInput.id}">–ò–∑–º–µ–Ω–∏—Ç—å</button>
            `;
            document.getElementById(`change-file-${fileInput.id}`).addEventListener('click', e => {
                e.preventDefault();
                resetDropArea(area, fileInput, label, icon);
                // –ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ –∫–ª–∏–∫ –ø–æ –Ω–æ–≤–æ–º—É fileInput
                setTimeout(() => {
                    const newInput = area.querySelector('input[type=file]');
                    newInput.click();
                }, 0);
            });
        }
        updateAnalyzeButtonState();
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
    function updateAnalyzeButtonState() {
        const isResumeLoaded = resumeUploadArea.querySelector('input[type=file]').files.length > 0;
        const isVacancyLoaded = vacancyUploadArea.querySelector('input[type=file]').files.length > 0;
        analyzeButton.disabled = !(isResumeLoaded && isVacancyLoaded);
    }

    // Drag&Drop –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–∑—é–º–µ
    resumeUploadArea.addEventListener('dragover', e => {
        e.preventDefault();
        resumeUploadArea.classList.add('dragover');
    });
    resumeUploadArea.addEventListener('dragleave', () => resumeUploadArea.classList.remove('dragover'));
    resumeUploadArea.addEventListener('drop', e => {
        e.preventDefault();
        resumeUploadArea.classList.remove('dragover');
        const fileInput = resumeUploadArea.querySelector('input[type=file]');
        if (e.dataTransfer.files.length) {
            fileInput.files = e.dataTransfer.files;
            handleFileSelect(resumeUploadArea, fileInput, '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞');
        }
    });
    resumeUploadArea.querySelector('input[type=file]').addEventListener('change', function() {
        handleFileSelect(resumeUploadArea, this, '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞');
    });

    // Drag&Drop –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏
    vacancyUploadArea.addEventListener('dragover', e => {
        e.preventDefault();
        vacancyUploadArea.classList.add('dragover');
    });
    vacancyUploadArea.addEventListener('dragleave', () => vacancyUploadArea.classList.remove('dragover'));
    vacancyUploadArea.addEventListener('drop', e => {
        e.preventDefault();
        vacancyUploadArea.classList.remove('dragover');
        const fileInput = vacancyUploadArea.querySelector('input[type=file]');
        if (e.dataTransfer.files.length) {
            fileInput.files = e.dataTransfer.files;
            handleFileSelect(vacancyUploadArea, fileInput, '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞');
        }
    });
    vacancyUploadArea.querySelector('input[type=file]').addEventListener('change', function() {
        handleFileSelect(vacancyUploadArea, this, '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞');
    });

    // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏
    analyzeButton.addEventListener('click', async () => {
        analyzeButton.disabled = true;
        progressBar.classList.remove('hidden');
        progressBarInner.style.width = '10%';
        progressBarText.textContent = '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...';
        resultPanel.classList.add('hidden');
        errorPanel.classList.add('hidden');

        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ fileInput
        const resumeInput = resumeUploadArea.querySelector('input[type=file]');
        const vacancyInput = vacancyUploadArea.querySelector('input[type=file]');
        const formData = new FormData();
        if (resumeInput.files.length) {
            formData.append('resume_file', resumeInput.files[0]);
        } else {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ');
            return;
        }
        if (vacancyInput.files.length) {
            formData.append('job_description_file', vacancyInput.files[0]);
        } else {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤–∞–∫–∞–Ω—Å–∏–∏/–ø—Ä–æ–µ–∫—Ç–∞');
            return;
        }

        try {
            progressBarInner.style.width = '35%';
            progressBarText.textContent = '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...';
            const response = await fetch('/api/compare', {
                method: 'POST',
                body: formData
            });
            progressBarInner.style.width = '70%';
            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ' + response.statusText);
            }
            const data = await response.json();
            progressBarInner.style.width = '100%';
            progressBarText.textContent = '–ì–æ—Ç–æ–≤–æ!';
            showResult(data.results);
        } catch (error) {
            progressBar.classList.add('hidden');
            errorPanel.classList.remove('hidden');
            document.getElementById('error-message').textContent = error.message || '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        } finally {
            setTimeout(() => {
                progressBar.classList.add('hidden');
                progressBarInner.style.width = '0%';
                progressBarText.textContent = '';
                analyzeButton.disabled = false;
            }, 1200);
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    retryButton.addEventListener('click', () => {
        errorPanel.classList.add('hidden');
        analyzeButton.disabled = false;
        progressBar.classList.add('hidden');
        progressBarInner.style.width = '0%';
        progressBarText.textContent = '';
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è drag&drop –∑–æ–Ω
    resetDropArea(resumeUploadArea, resumeFileInput, '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞');
    resetDropArea(vacancyUploadArea, vacancyFileInput, '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞');
    updateAnalyzeButtonState();

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
    function showResult(results) {
        // TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫—Ä–∞—Å–∏–≤—É—é –æ—Ç—Ä–∏—Å–æ–≤–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ (—Å–∫–æ—Ä–∏–Ω–≥, –Ω–∞–≤—ã–∫–∏, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏)
        resultPanel.classList.remove('hidden');
        resultPanel.innerHTML = `<pre style="text-align:left;background:#f3f4f6;padding:1rem;border-radius:8px;">${JSON.stringify(results, null, 2)}</pre>`;
    }
});
    // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
    const uploadArea = document.getElementById('upload-area');
    const resumeFileInput = document.getElementById('resume-file');
    const uploadButton = document.getElementById('upload-button');
    const analyzeButton = document.getElementById('analyze-button');
    const progressBar = document.getElementById('progress-bar');
    const progressBarInner = document.getElementById('progress-bar-inner');
    const progressBarText = document.getElementById('progress-bar-text');
    const loadingPanel = document.getElementById('loading-panel');
    const resultPanel = document.getElementById('result-panel');
    const errorPanel = document.getElementById('error-panel');
    const retryButton = document.getElementById('retry-button');
    const detailButton = document.getElementById('detail-button');
    const interviewButton = document.getElementById('interview-button');
    // Drag&Drop –∑–æ–Ω—ã
    vacancyUploadArea.addEventListener('dragover', e => {
        e.preventDefault();
        vacancyUploadArea.classList.add('dragover');
    });
    vacancyUploadArea.addEventListener('dragleave', () => vacancyUploadArea.classList.remove('dragover'));
    vacancyUploadArea.addEventListener('drop', e => {
        e.preventDefault();
        vacancyUploadArea.classList.remove('dragover');
        if (e.dataTransfer.files.length) {
            vacancyFileInput.files = e.dataTransfer.files;
            handleFileSelect(vacancyUploadArea, vacancyFileInput, '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞');
        }
    });
    vacancyFileInput.addEventListener('change', () => handleFileSelect(vacancyUploadArea, vacancyFileInput, '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞'));

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
    function updateAnalyzeButtonState() {
        const isResumeLoaded = resumeFileInput.files.length > 0;
        const isVacancyLoaded = vacancyFileInput.files.length > 0;
        analyzeButton.disabled = !(isResumeLoaded && isVacancyLoaded);
    }
    
    uploadArea.addEventListener('dragover', (e) => {
        e.preventDefault();
        uploadArea.classList.add('dragover');
    });
    
    uploadArea.addEventListener('dragleave', () => {
        uploadArea.classList.remove('dragover');
    });
    
    uploadArea.addEventListener('drop', (e) => {
        e.preventDefault();
        uploadArea.classList.remove('dragover');
        
        if (e.dataTransfer.files.length) {
            resumeFileInput.files = e.dataTransfer.files;
            handleFileSelect();
        }
    });
    
    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
    function handleFileSelect(area, fileInput, label, icon = 'üìÑ') {
        if (fileInput.files.length) {
            const fileName = fileInput.files[0].name;
            area.innerHTML = `
                <div class="upload-icon">${icon}</div>
                <h3 class="upload-text">–§–∞–π–ª –≤—ã–±—Ä–∞–Ω</h3>
                <p>${fileName}</p>
                <button class="button button-outline" id="change-file-${fileInput.id}">–ò–∑–º–µ–Ω–∏—Ç—å</button>
            `;
            document.getElementById(`change-file-${fileInput.id}`).addEventListener('click', e => {
                e.preventDefault();
                resetDropArea(area, fileInput, label, icon);
                fileInput.click();
            });
        }
        updateAnalyzeButtonState();
    }
    
    // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –∑–∞–≥—Ä—É–∑–∫–∏
    function resetUploadArea() {
        uploadArea.innerHTML = `
            <div class="upload-icon">üìÑ</div>
            <h3 class="upload-text">–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞</h3>
            <button class="button" id="upload-button">–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª</button>
        `;
        
        resumeFileInput.value = '';
        analyzeButton.disabled = true;
        
        resultPanel.classList.add('hidden');
        errorPanel.classList.add('hidden');

        // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        const formData = new FormData();
        if (resumeFileInput.files.length) {
            formData.append('resume_file', resumeFileInput.files[0]);
        } else {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ');
            return;
        }
        if (vacancyFileInput.files.length) {
            formData.append('job_description_file', vacancyFileInput.files[0]);
        } else {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤–∞–∫–∞–Ω—Å–∏–∏/–ø—Ä–æ–µ–∫—Ç–∞');
            return;
        }

        try {
            progressBarInner.style.width = '35%';
            progressBarText.textContent = '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...';
            const response = await fetch('/api/compare', {
                method: 'POST',
                body: formData
            });
            progressBarInner.style.width = '70%';
            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ' + response.statusText);
            }
            const data = await response.json();
            progressBarInner.style.width = '100%';
            progressBarText.textContent = '–ì–æ—Ç–æ–≤–æ!';
            showResult(data.results);
        } catch (error) {
            progressBar.classList.add('hidden');
            errorPanel.classList.remove('hidden');
            document.getElementById('error-message').textContent = error.message || '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        } finally {
            skillItem.innerHTML = `
                <div class="skill-name">${skill}</div>
                <div class="skill-bar-container">
                    <div class="skill-bar" style="width: ${percentage}%;"></div>
                </div>
                <div class="skill-score">${score}/10</div>
            `;
            
            skillsList.appendChild(skillItem);
        });
    }
    
    // –ö–Ω–æ–ø–∫–∞ "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"
    retryButton.addEventListener('click', () => {
        errorPanel.classList.add('hidden');
        analyzeButton.disabled = false;
    });
    
    // –ö–Ω–æ–ø–∫–∞ "–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç"
    detailButton.addEventListener('click', () => {
        alert('–ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF');
    });
    
    // –ö–Ω–æ–ø–∫–∞ "–°–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é"
    interviewButton.addEventListener('click', () => {
        alert('–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞');
    });
    
    // –°–ª—É—à–∞—Ç–µ–ª–∏ –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö)
    positionInput.addEventListener('input', updatePositionInResults);
    skillsInput.addEventListener('input', () => {
        if (resultPanel.classList.contains('hidden')) return;
        updateSkillsFromInput();
    });
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    function updatePositionInResults() {
        const resultTitle = document.querySelector('.result-title');
        if (positionInput.value.trim()) {
            resultTitle.textContent = `–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ: ${positionInput.value}`;
        } else {
            resultTitle.textContent = '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞';
        }
    }
    
    // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ —à–∫–∞–ª—ã –Ω–∞–≤—ã–∫–æ–≤
    function animateSkillBars() {
        const skillBars = document.querySelectorAll('.skill-bar');
        skillBars.forEach(bar => {
            const targetWidth = bar.style.width;
            bar.style.width = '0%';
            
            setTimeout(() => {
                bar.style.transition = 'width 1s ease-in-out';
                bar.style.width = targetWidth;
            }, 100);
        });
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    function generateRecommendations() {
        const recommendationsContainer = document.querySelector('.recommendations');
        recommendationsContainer.innerHTML = '';
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        const requirements = requirementsInput.value.toLowerCase();
        const skills = skillsInput.value.toLowerCase().split(',').map(s => s.trim());
        
        // –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        addRecommendation('positive', '–°–∏–ª—å–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –±—ç–∫–≥—Ä–∞—É–Ω–¥ –≤ —Ç—Ä–µ–±—É–µ–º—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö');
        addRecommendation('positive', '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –±–æ–ª–µ–µ 3 –ª–µ—Ç –≤ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏');
        
        // –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if (!requirements.includes('–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω')) {
            addRecommendation('neutral', '–ù–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–ø—ã—Ç–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö');
        }
        
        // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if (skills.includes('graphql') && !requirements.includes('graphql')) {
            addRecommendation('negative', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å GraphQL');
        }
        
        if (skills.includes('typescript') && !requirements.includes('typescript')) {
            addRecommendation('negative', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ–ø—ã—Ç TypeScript');
        }
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
    function addRecommendation(type, text) {
        const recommendationsContainer = document.querySelector('.recommendations');
        
        const recommendation = document.createElement('div');
        recommendation.className = `recommendation ${type}`;
        
        const icon = type === 'positive' ? '‚úì' : type === 'neutral' ? '‚ö†' : '‚úó';
        
        recommendation.innerHTML = `
            <div class="rec-icon">${icon}</div>
            <div>${text}</div>
        `;
        
        recommendationsContainer.appendChild(recommendation);
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–≤—ã–∫–æ–≤
    function updateMatchScore() {
        const scoreBadge = document.querySelector('.score-badge');
        const reqSkills = skillsInput.value.toLowerCase().split(',').map(s => s.trim()).filter(s => s);
        
        // –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å AI)
        const matchPercentage = Math.floor(Math.random() * 30) + 70; // 70-99%
        scoreBadge.textContent = `${matchPercentage}%`;
        
        // –ò–∑–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞
        if (matchPercentage >= 90) {
            scoreBadge.style.background = 'linear-gradient(135deg, #34d399, #059669)';
        } else if (matchPercentage >= 80) {
            scoreBadge.style.background = 'linear-gradient(135deg, #4361ee, #3a0ca3)';
        } else if (matchPercentage >= 70) {
            scoreBadge.style.background = 'linear-gradient(135deg, #fbbf24, #d97706)';
        } else {
            scoreBadge.style.background = 'linear-gradient(135deg, #f87171, #dc2626)';
        }
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è drag&drop –∑–æ–Ω
    resetDropArea(resumeUploadArea, resumeFileInput, '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞');
    resetDropArea(vacancyUploadArea, vacancyFileInput, '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞');
    updateAnalyzeButtonState();

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
    function showResult(results) {
        // TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫—Ä–∞—Å–∏–≤—É—é –æ—Ç—Ä–∏—Å–æ–≤–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ (—Å–∫–æ—Ä–∏–Ω–≥, –Ω–∞–≤—ã–∫–∏, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏)
        resultPanel.classList.remove('hidden');
        resultPanel.innerHTML = `<pre style="text-align:left;background:#f3f4f6;padding:1rem;border-radius:8px;">${JSON.stringify(results, null, 2)}</pre>`;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    retryButton.addEventListener('click', () => {
        errorPanel.classList.add('hidden');
        analyzeButton.disabled = false;
        progressBar.classList.add('hidden');
        progressBarInner.style.width = '0%';
        progressBarText.textContent = '';
    });
});
