/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –∏ —É–ª—É—á—à–µ–Ω–∏—è –æ–±—â–µ–Ω–∏—è –ò–ò –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 */

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
 * @returns {string} - –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω ('positive', 'negative', 'neutral')
 */
export const analyzeEmotionalTone = (text) => {
  if (!text) return 'neutral';
  
  const lowerText = text.toLowerCase();
  
  // –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
  const positiveMarkers = [
    '—Ä–∞–¥', '–ø—Ä–∏—è—Ç–Ω–æ', '—Ö–æ—Ä–æ—à–æ', '–æ—Ç–ª–∏—á–Ω–æ', '–∑–¥–æ—Ä–æ–≤–æ', '–∫—Ä—É—Ç–æ', '–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ',
    '—É—Å–ø–µ—à–Ω–æ', '–¥–æ–≤–æ–ª–µ–Ω', '–±–ª–∞–≥–æ–¥–∞—Ä—é', '—Å–ø–∞—Å–∏–±–æ', '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '–ª—é–±–ª—é', '–Ω—Ä–∞–≤–∏—Ç—Å—è',
    '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ', '—Å—É–ø–µ—Ä', '–≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ', '—Å—á–∞—Å—Ç–ª–∏–≤', '—É–ª—ã–±–∫–∞', ':)', 'üôÇ', 'üëç'
  ];
  
  // –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
  const negativeMarkers = [
    '–ø–ª–æ—Ö–æ', '—Å–ª–æ–∂–Ω–æ', '—Ç—Ä—É–¥–Ω–æ', '–ø—Ä–æ–±–ª–µ–º–∞', '–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è', '—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω',
    '–∂–∞–ª—å', '–≥—Ä—É—Å—Ç–Ω–æ', '—É–≤—ã', '–Ω–µ–¥–æ–≤–æ–ª–µ–Ω', '—Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç', '–∏–∑–≤–∏–Ω–∏—Ç–µ', '–æ—à–∏–±–∫–∞',
    '–Ω–µ –º–æ–≥—É', '–Ω–µ –ø–æ–Ω–∏–º–∞—é', '–Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è', '–∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é', ':(', 'üôÅ', 'üëé'
  ];
  
  // –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
  const contemplativeMarkers = [
    '–¥—É–º–∞—é', '–ø–æ–ª–∞–≥–∞—é', '—Å—á–∏—Ç–∞—é', '–≤–æ–∑–º–æ–∂–Ω–æ', '–Ω–∞–≤–µ—Ä–Ω–æ–µ', '–ø–æ–∂–∞–ª—É–π',
    '—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ', '–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ', '–Ω–∞ –º–æ–π –≤–∑–≥–ª—è–¥', '–ø–æ –º–æ–µ–º—É –º–Ω–µ–Ω–∏—é'
  ];
  
  // –ü–æ–¥—Å—á–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
  let positiveCount = 0;
  let negativeCount = 0;
  let contemplativeCount = 0;
  
  positiveMarkers.forEach(marker => {
    if (lowerText.includes(marker)) positiveCount++;
  });
  
  negativeMarkers.forEach(marker => {
    if (lowerText.includes(marker)) negativeCount++;
  });
  
  contemplativeMarkers.forEach(marker => {
    if (lowerText.includes(marker)) contemplativeCount++;
  });
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—â–µ–≥–æ —Ç–æ–Ω–∞
  if (positiveCount > negativeCount && positiveCount > contemplativeCount) {
    return 'positive';
  } else if (negativeCount > positiveCount && negativeCount > contemplativeCount) {
    return 'negative';
  } else if (contemplativeCount > 0) {
    return 'contemplative';
  }
  
  return 'neutral';
};

/**
 * –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –ò–ò –∫ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É —Ç–æ–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} baseResponse - –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç –ò–ò
 * @param {string} emotion - –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω ('positive', 'negative', 'neutral', 'contemplative')
 * @returns {string} - –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–æ–Ω–∞
 */
export const adaptResponseToEmotion = (baseResponse, emotion) => {
  if (!baseResponse) return '';
  
  // –§—Ä–∞–∑—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–æ–Ω–∞
  const emotionPhrases = {
    positive: [
      '–û—Ç–ª–∏—á–Ω–æ! ',
      '–≠—Ç–æ –∑–¥–æ—Ä–æ–≤–æ! ',
      '–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! ',
      '–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! ',
      '–Ø —Ä–∞–¥ —Å–ª—ã—à–∞—Ç—å —ç—Ç–æ! ',
      ''
    ],
    negative: [
      '–Ø –ø–æ–Ω–∏–º–∞—é –≤–∞—à–∏ —á—É–≤—Å—Ç–≤–∞. ',
      '–°–æ—á—É–≤—Å—Ç–≤—É—é –≤–∞–º. ',
      '–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø—Ä–æ—Å—Ç–æ. ',
      '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å. ',
      ''
    ],
    contemplative: [
      '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–æ—á–∫–∞ –∑—Ä–µ–Ω–∏—è. ',
      '–Ø —Ü–µ–Ω—é –≤–∞—à–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è. ',
      '–≠—Ç–æ —Ö–æ—Ä–æ—à–∏–π –ø–æ–¥—Ö–æ–¥ –∫ –∞–Ω–∞–ª–∏–∑—É. ',
      '–í–∞—à–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –æ—á–µ–Ω—å –≥–ª—É–±–æ–∫–∏–µ. ',
      ''
    ],
    neutral: [
      '',
      '–ü–æ–Ω—è—Ç–Ω–æ. ',
      '–•–æ—Ä–æ—à–æ. ',
      '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ. ',
      ''
    ]
  };
  
  // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const phrases = emotionPhrases[emotion] || emotionPhrases.neutral;
  const randomPhrase = phrases[Math.floor(Math.random() * phrases.length)];
  
  return randomPhrase + baseResponse;
};

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
 * @param {Array} messageHistory - –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
 * @returns {Object} - –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏–∞–ª–æ–≥–µ
 */
export const analyzeConversationContext = (messageHistory) => {
  if (!messageHistory || !Array.isArray(messageHistory)) {
    return { topicsCovered: [], factsMentioned: {}, currentTopic: null };
  }
  
  const context = {
    topicsCovered: [], // –¢–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ–±—Å—É–∂–¥–∞–ª–∏—Å—å
    factsMentioned: {}, // –§–∞–∫—Ç—ã, —É–ø–æ–º—è–Ω—É—Ç—ã–µ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ
    currentTopic: null, // –¢–µ–∫—É—â–∞—è —Ç–µ–º–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    questionCount: 0, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    userInfo: {} // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  };
  
  // –ú–∞—Å—Å–∏–≤ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–º
  const topicKeywords = {
    '–æ–ø—ã—Ç_—Ä–∞–±–æ—Ç—ã': ['–æ–ø—ã—Ç', '—Ä–∞–±–æ—Ç–∞–ª', '–∫–æ–º–ø–∞–Ω–∏—è', '–¥–æ–ª–∂–Ω–æ—Å—Ç—å', '–ø–æ–∑–∏—Ü–∏—è', '–∫–∞—Ä—å–µ—Ä–∞'],
    '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': ['–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç', '–∏–Ω—Å—Ç–∏—Ç—É—Ç', '–¥–∏–ø–ª–æ–º', '—Å—Ç–µ–ø–µ–Ω—å', '—É—á–∏–ª—Å—è'],
    '–Ω–∞–≤—ã–∫–∏': ['–Ω–∞–≤—ã–∫', '—É–º–µ–Ω–∏–µ', '–≤–ª–∞–¥–µ—é', '–∑–Ω–∞—é', '–º–æ–≥—É', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è', '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç'],
    '–ø—Ä–æ–µ–∫—Ç—ã': ['–ø—Ä–æ–µ–∫—Ç', '–∑–∞–¥–∞—á–∞', '—Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª', '—Å–æ–∑–¥–∞–ª', '–≤–Ω–µ–¥—Ä–∏–ª'],
    '–ª–∏—á–Ω—ã–µ_–∫–∞—á–µ—Å—Ç–≤–∞': ['–∫–∞—á–µ—Å—Ç–≤–æ', '—Å–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞', '—Ö–∞—Ä–∞–∫—Ç–µ—Ä', '–ª–∏—á–Ω–æ—Å—Ç—å', '–∫–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω—ã–π']
  };
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏–∏
  messageHistory.forEach(message => {
    if (!message.text) return;
    
    const text = message.text.toLowerCase();
    
    // –ü–æ–¥—Å—á–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤
    if (message.sender === 'ai' && (text.includes('?') || 
        /—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ|—Å–∫–∞–∂–∏—Ç–µ|–æ–±—ä—è—Å–Ω–∏—Ç–µ|–ø–æ–¥–µ–ª–∏—Ç–µ—Å—å|–æ–ø–∏—à–∏—Ç–µ/.test(text))) {
      context.questionCount++;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º—ã —Å–æ–æ–±—â–µ–Ω–∏—è
    Object.keys(topicKeywords).forEach(topic => {
      if (topicKeywords[topic].some(keyword => text.includes(keyword))) {
        if (!context.topicsCovered.includes(topic)) {
          context.topicsCovered.push(topic);
        }
        context.currentTopic = topic;
      }
    });
    
    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (—Ç–æ–ª—å–∫–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    if (message.sender === 'user') {
      // –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–ª–µ—Ç)
      const experienceMatch = text.match(/–æ–ø—ã—Ç (?:—Ä–∞–±–æ—Ç—ã )?(\d+)(?:\s+|\s*-)?\s*(?:–ª–µ—Ç|–≥–æ–¥)/i);
      if (experienceMatch) {
        context.userInfo.experienceYears = parseInt(experienceMatch[1]);
      }
      
      // –ö–æ–º–ø–∞–Ω–∏–∏
      const companyMatch = text.match(/(?:—Ä–∞–±–æ—Ç–∞–ª|—Ä–∞–±–æ—Ç–∞—é) –≤ ([^,.]+)/i);
      if (companyMatch) {
        const company = companyMatch[1].trim();
        context.factsMentioned.companies = context.factsMentioned.companies || [];
        if (!context.factsMentioned.companies.includes(company)) {
          context.factsMentioned.companies.push(company);
        }
      }
      
      // –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏/–Ω–∞–≤—ã–∫–∏
      const techMatches = text.match(/(?:–≤–ª–∞–¥–µ—é|–∑–Ω–∞—é|–∏—Å–ø–æ–ª—å–∑—É—é|—Ä–∞–±–æ—Ç–∞—é —Å) ([^,.]+)/ig);
      if (techMatches) {
        context.factsMentioned.skills = context.factsMentioned.skills || [];
        techMatches.forEach(match => {
          const skill = match.replace(/(?:–≤–ª–∞–¥–µ—é|–∑–Ω–∞—é|–∏—Å–ø–æ–ª—å–∑—É—é|—Ä–∞–±–æ—Ç–∞—é —Å) /i, '').trim();
          if (!context.factsMentioned.skills.includes(skill)) {
            context.factsMentioned.skills.push(skill);
          }
        });
      }
    }
  });
  
  return context;
};

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞
 * @param {Object} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
 * @returns {string} - –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
 */
export const generateContextualQuestion = (context) => {
  if (!context) return '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –∏ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã.';
  
  // –í–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–Ω—Ç–µ—Ä–≤—å—é)
  const progressBasedQuestions = [
    '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ —Å–µ–±–µ –∏ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã.',
    '–ö–∞–∫–∏–º–∏ –∫–ª—é—á–µ–≤—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏ –≤—ã –æ–±–ª–∞–¥–∞–µ—Ç–µ?',
    '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–∞–º–æ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ, –Ω–∞–¥ –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ä–∞–±–æ—Ç–∞–ª–∏.',
    '–ö–∞–∫ –≤—ã —Ä–µ—à–∞–µ—Ç–µ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏, –∫–æ–≥–¥–∞ —Å—Ç–∞–ª–∫–∏–≤–∞–µ—Ç–µ—Å—å —Å –Ω–∏–º–∏?',
    '–ö–∞–∫–æ–≤—ã –≤–∞—à–∏ –∫–∞—Ä—å–µ—Ä–Ω—ã–µ —Ü–µ–ª–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –≥–æ–¥—ã?',
    '–ß—Ç–æ –≤–∞—Å –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –≤ —Ä–∞–±–æ—Ç–µ?',
    '–ö–∞–∫ –≤—ã —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–≤—ã–º–∏ —Å–∏—Ç—É–∞—Ü–∏—è–º–∏?',
    '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–∏—Ö —Å–∏–ª—å–Ω—ã—Ö –∏ —Å–ª–∞–±—ã—Ö —Å—Ç–æ—Ä–æ–Ω–∞—Ö.',
    '–ß—Ç–æ –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω–æ –≤ —Ä–∞–±–æ—á–µ–π —Å—Ä–µ–¥–µ –∏ –∫—É–ª—å—Ç—É—Ä–µ –∫–æ–º–ø–∞–Ω–∏–∏?',
    '–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å—ã –∫ –Ω–∞–º?'
  ];
  
  if (context.questionCount < progressBasedQuestions.length) {
    return progressBasedQuestions[context.questionCount];
  }
  
  // –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–æ–≤
  if (context.userInfo.experienceYears) {
    if (context.userInfo.experienceYears > 5) {
      return `–° –≤–∞—à–∏–º –≤–ø–µ—á–∞—Ç–ª—è—é—â–∏–º –æ–ø—ã—Ç–æ–º ${context.userInfo.experienceYears} –ª–µ—Ç, –∫–∞–∫–∏–µ —Å–∞–º—ã–µ —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤–∞–º —É–¥–∞–ª–æ—Å—å —Ä–µ—à–∏—Ç—å?`;
    } else if (context.userInfo.experienceYears < 3) {
      return '–ö–∞–∫ –≤—ã –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ—Ç–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–±–æ–ª—å—à–æ–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã? –ö–∞–∫–∏–µ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞?';
    }
  }
  
  if (context.factsMentioned.companies && context.factsMentioned.companies.length > 0) {
    const lastCompany = context.factsMentioned.companies[context.factsMentioned.companies.length - 1];
    return `–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–π —Ä–∞–±–æ—Ç–µ –≤ ${lastCompany}. –ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –≤—ã —Ç–∞–º —Ä–µ—à–∞–ª–∏?`;
  }
  
  if (context.factsMentioned.skills && context.factsMentioned.skills.length > 0) {
    const randomSkill = context.factsMentioned.skills[Math.floor(Math.random() * context.factsMentioned.skills.length)];
    return `–í—ã —É–ø–æ–º—è–Ω—É–ª–∏ ${randomSkill}. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö, –≥–¥–µ –≤—ã –ø—Ä–∏–º–µ–Ω—è–ª–∏ —ç—Ç–æ—Ç –Ω–∞–≤—ã–∫.`;
  }
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–º –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é
  const topicKeywords = {
    '–æ–ø—ã—Ç_—Ä–∞–±–æ—Ç—ã': ['–æ–ø—ã—Ç', '—Ä–∞–±–æ—Ç–∞', '–¥–æ–ª–∂–Ω–æ—Å—Ç—å', '–∫–æ–º–ø–∞–Ω–∏—è', '–∫–∞—Ä—å–µ—Ä–∞'],
    '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': ['–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç', '–∏–Ω—Å—Ç–∏—Ç—É—Ç', '–¥–∏–ø–ª–æ–º', '—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å', '–∫—É—Ä—Å—ã'],
    '–Ω–∞–≤—ã–∫–∏': ['–Ω–∞–≤—ã–∫–∏', '—É–º–µ–Ω–∏—è', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', '–º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏'],
    '–ø—Ä–æ–µ–∫—Ç—ã': ['–ø—Ä–æ–µ–∫—Ç', '–∑–∞–¥–∞—á–∞', '–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç', '–≤–Ω–µ–¥—Ä–µ–Ω–∏–µ'],
    '–ª–∏—á–Ω—ã–µ_–∫–∞—á–µ—Å—Ç–≤–∞': ['–∫–∞—á–µ—Å—Ç–≤–∞', '—Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã', '—Ö–∞—Ä–∞–∫—Ç–µ—Ä', '–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è', '—Ä–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ'],
    '–æ–∂–∏–¥–∞–Ω–∏—è': ['–æ–∂–∏–¥–∞–Ω–∏—è', '—Ü–µ–ª–∏', '–ø–ª–∞–Ω—ã', '–∑–∞—Ä–ø–ª–∞—Ç–∞', '—Ä–∞–∑–≤–∏—Ç–∏–µ', '—Ä–æ—Å—Ç']
  };
  
  // –í–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –∏ –Ω–µ–ø–æ–∫—Ä—ã—Ç—ã—Ö —Ç–µ–º
  const uncoveredTopics = Object.keys(topicKeywords).filter(topic => !context.topicsCovered.includes(topic));
  
  if (uncoveredTopics.length > 0) {
    const nextTopic = uncoveredTopics[0];
    switch (nextTopic) {
      case '–æ–ø—ã—Ç_—Ä–∞–±–æ—Ç—ã':
        return '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º –æ–ø—ã—Ç–µ. –ì–¥–µ –≤—ã —Ä–∞–±–æ—Ç–∞–ª–∏ –∏ –∫–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ —Ä–µ—à–∞–ª–∏?';
      case '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ':
        return '–ö–∞–∫–æ–µ —É –≤–∞—Å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ? –ö–∞–∫ –æ–Ω–æ –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º –≤ —Ä–∞–±–æ—Ç–µ?';
      case '–Ω–∞–≤—ã–∫–∏':
        return '–ö–∞–∫–∏–º–∏ –∫–ª—é—á–µ–≤—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ –≤—ã –≤–ª–∞–¥–µ–µ—Ç–µ?';
      case '–ø—Ä–æ–µ–∫—Ç—ã':
        return '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö, –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã –æ—Å–æ–±–µ–Ω–Ω–æ –≥–æ—Ä–¥–∏—Ç–µ—Å—å.';
      case '–ª–∏—á–Ω—ã–µ_–∫–∞—á–µ—Å—Ç–≤–∞':
        return '–ö–∞–∫–∏–µ –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–º–æ–≥–∞—é—Ç –≤–∞–º –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?';
      default:
        return '–ß—Ç–æ –µ—â–µ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ?';
    }
  }
  
  // –ï—Å–ª–∏ –≤—Å–µ —Ç–µ–º—ã –ø–æ–∫—Ä—ã—Ç—ã, –∑–∞–¥–∞–µ–º –æ–±–æ–±—â–∞—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
  return '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã! –ï—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ –µ—â–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —Å–ø—Ä–æ—Å–∏—Ç—å?';
};

/**
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏
 * @param {string} previousQuestion - –ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å
 * @param {string} nextQuestion - –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
 * @returns {string} - –î–æ–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å —Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –ø–µ—Ä–µ—Ö–æ–¥–æ–º
 */
export const createSmoothTransition = (previousQuestion, nextQuestion) => {
  if (!previousQuestion || !nextQuestion) return nextQuestion;
  
  // –ü–µ—Ä–µ—Ö–æ–¥–Ω—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è —Å–≤—è–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
  const transitions = [
    '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç. ',
    '–≠—Ç–æ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ. ',
    '–•–æ—Ä–æ—à–æ, –ø–æ–Ω—è–ª –≤–∞—Å. ',
    '–û—Ç–ª–∏—á–Ω–æ. –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ. ',
    '–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç. ',
    '–≠—Ç–æ —Ü–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. ',
    '–ü–æ–Ω—è—Ç–Ω–æ. '
  ];
  
  // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–µ—Ä–µ—Ö–æ–¥–Ω—É—é —Ñ—Ä–∞–∑—É
  const transition = transitions[Math.floor(Math.random() * transitions.length)];
  
  return transition + nextQuestion;
};
